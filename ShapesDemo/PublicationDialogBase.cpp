///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/button.h>
#include <wx/sizer.h>
#include <wx/statbox.h>

#include "PublicationDialogBase.h"

bool PublicationDialogBase::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;

    auto* dlg_sizer = new wxBoxSizer(wxVERTICAL);

    auto* box_sizer = new wxBoxSizer(wxHORIZONTAL);

    auto* static_box = new wxStaticBoxSizer(wxVERTICAL, this, "Color");

    m_radioRed = new wxRadioButton(static_box->GetStaticBox(), ID_CHK_RED, "RED");
    m_radioRed->SetValue(true);
    static_box->Add(m_radioRed, wxSizerFlags().Border(wxALL));

    m_radioGreen = new wxRadioButton(static_box->GetStaticBox(), ID_CHK_GREEN, "GREEN");
    static_box->Add(m_radioGreen, wxSizerFlags().Border(wxALL));

    m_radioBlue = new wxRadioButton(static_box->GetStaticBox(), ID_CHK_BLUE, "BLUE");
    static_box->Add(m_radioBlue, wxSizerFlags().Border(wxALL));

    m_radioCyan = new wxRadioButton(static_box->GetStaticBox(), ID_CHK_CYAN, "CYAN");
    static_box->Add(m_radioCyan, wxSizerFlags().Border(wxALL));

    m_radioMagenta = new wxRadioButton(static_box->GetStaticBox(), ID_CHK_MAGENTA, "MAGENTA");
    static_box->Add(m_radioMagenta, wxSizerFlags().Border(wxALL));

    m_radioYellow = new wxRadioButton(static_box->GetStaticBox(), ID_CHK_YELLOW, "YELLOW");
    static_box->Add(m_radioYellow, wxSizerFlags().Border(wxALL));

    m_radioPurple = new wxRadioButton(static_box->GetStaticBox(), ID_CHK_PURPLE, "PURPLE");
    static_box->Add(m_radioPurple, wxSizerFlags().Border(wxALL));

    m_radioOrange = new wxRadioButton(static_box->GetStaticBox(), ID_CHK_ORANGE, "ORANGE");
    static_box->Add(m_radioOrange, wxSizerFlags().Border(wxALL));

    box_sizer->Add(static_box, wxSizerFlags().Border(wxALL));

    auto* box_sizer_2 = new wxBoxSizer(wxVERTICAL);

    auto* static_box_2 = new wxStaticBoxSizer(wxVERTICAL, this, "Shape");

    m_radioCircle = new wxRadioButton(static_box_2->GetStaticBox(), ID_CHK_CIRCLE, "Circle");
    m_radioCircle->SetValue(true);
    static_box_2->Add(m_radioCircle, wxSizerFlags().Border(wxALL));

    m_radioTriangle = new wxRadioButton(static_box_2->GetStaticBox(), ID_CHK_TRIANGLE, "Triangle");
    static_box_2->Add(m_radioTriangle, wxSizerFlags().Border(wxALL));

    m_radioSquare = new wxRadioButton(static_box_2->GetStaticBox(), ID_CHK_SQUARE, "Square");
    static_box_2->Add(m_radioSquare, wxSizerFlags().Border(wxALL));

    box_sizer_2->Add(static_box_2, wxSizerFlags().Expand().Border(wxALL));

    auto* static_box_3 = new wxStaticBoxSizer(wxVERTICAL, this, "Size");

    m_spinSize = new wxSpinCtrl(static_box_3->GetStaticBox(), wxID_ANY, wxEmptyString, wxDefaultPosition,
        wxDefaultSize, wxSP_ARROW_KEYS, 0, 300, 0);
    static_box_3->Add(m_spinSize, wxSizerFlags().Expand().Border(wxALL));

    box_sizer_2->Add(static_box_3, wxSizerFlags().Expand().Border(wxALL));

    box_sizer->Add(box_sizer_2, wxSizerFlags().Expand());

    auto* static_box_4 = new wxStaticBoxSizer(wxVERTICAL, this, "Partition");

    m_checkBox = new wxCheckBox(static_box_4->GetStaticBox(), ID_CHK_ALL, "*");
    static_box_4->Add(m_checkBox, wxSizerFlags().Border(wxALL));

    m_checkBox_2 = new wxCheckBox(static_box_4->GetStaticBox(), ID_CHK_A, "A");
    static_box_4->Add(m_checkBox_2, wxSizerFlags().Border(wxALL));

    m_checkBox_3 = new wxCheckBox(static_box_4->GetStaticBox(), ID_CHK_B, "B");
    static_box_4->Add(m_checkBox_3, wxSizerFlags().Border(wxALL));

    m_checkBox_4 = new wxCheckBox(static_box_4->GetStaticBox(), ID_CHK_C, "C");
    static_box_4->Add(m_checkBox_4, wxSizerFlags().Border(wxALL));

    m_checkBox_5 = new wxCheckBox(static_box_4->GetStaticBox(), ID_CHK_D, "D");
    static_box_4->Add(m_checkBox_5, wxSizerFlags().Border(wxALL));

    box_sizer->Add(static_box_4, wxSizerFlags().Border(wxALL));

    dlg_sizer->Add(box_sizer, wxSizerFlags().Expand().Border(wxALL));

    auto* stdBtn = CreateStdDialogButtonSizer(wxOK|wxCANCEL);
    dlg_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    SetSizerAndFit(dlg_sizer);
    Centre(wxBOTH);

    return true;
}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************
