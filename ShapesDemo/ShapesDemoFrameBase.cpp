///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/bitmap.h>
#include <wx/icon.h>
#include <wx/image.h>
#include <wx/sizer.h>

#include "CanvasPanel.h"

#include "ShapesDemoFrameBase.h"

#include <wx/mstream.h>  // memory stream classes
#include <wx/zstream.h>  // zlib stream classes

#include <memory>  // for std::make_unique

#if !wxCHECK_VERSION(3, 1, 6)
    #error "You must build with wxWidgets 3.1.6 or later to use SVG images."
#endif

// Convert compressed SVG string into a wxBitmapBundle
inline wxBitmapBundle wxueBundleSVG(const unsigned char* data,
    size_t size_data, size_t size_svg, wxSize def_size)
{
    auto str = std::make_unique<char[]>(size_svg);
    wxMemoryInputStream stream_in(data, size_data);
    wxZlibInputStream zlib_strm(stream_in);
    zlib_strm.Read(str.get(), size_svg);
    return wxBitmapBundle::FromSVG(str.get(), def_size);
};

bool ShapesDemoFrameBase::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{

    if (!wxFrame::Create(parent, id, title, pos, size, style, name))
        return false;

    m_toolBar = CreateToolBar(wxTB_HORIZONTAL|wxTB_HORZ_TEXT);
    m_toolBar->AddTool(ID_PUBLISH, "Publish",
#if wxCHECK_VERSION(3, 1, 6)
        wxueBundleSVG(wxue_img::pub_svg, 257, 391, wxSize(24, 24))
#else
        wxBitmap(wxNullBitmap /* SVG images require wxWidgets 3.1.6 */)
#endif
    , "Create DataWriter");

    m_toolBar->AddTool(ID_SUBSCRIBE, "Subscribe",
#if wxCHECK_VERSION(3, 1, 6)
        wxueBundleSVG(wxue_img::sub_svg, 258, 394, wxSize(24, 24))
#else
        wxBitmap(wxNullBitmap /* SVG images require wxWidgets 3.1.6 */)
#endif
    );

    m_checkBox = new wxCheckBox(m_toolBar, wxID_ANY, "Publish All", wxDefaultPosition, wxDefaultSize,
        wxCHK_3STATE);
    m_toolBar->AddControl(m_checkBox);
    m_toolBar->Realize();

    m_statusBar = CreateStatusBar();

    auto* box_sizer = new wxBoxSizer(wxVERTICAL);

    m_panel = new CanvasPanel(this, ID_CANVAS, wxDefaultPosition, wxDefaultSize,
        wxTAB_TRAVERSAL|wxFULL_REPAINT_ON_RESIZE);
    m_panel->SetMinSize(wxSize(472, 532));
    box_sizer->Add(m_panel, wxSizerFlags().Border(wxALL));
    SetSizerAndFit(box_sizer);


    Centre(wxBOTH);

    return true;
}

namespace wxue_img
{

    const unsigned char pub_svg[257] {
        120,218,93,81,65,78,195,48,16,228,41,43,247,10,141,237,38,177,27,146,156,57,192,181,7,110,33,118,
        19,171,166,137,98,83,20,94,192,11,184,33,241,136,254,138,62,130,117,104,129,178,146,61,163,217,93,
        239,216,206,221,174,41,115,165,215,14,140,42,72,32,156,68,101,222,128,217,110,92,93,245,58,179,213,
        131,182,5,249,252,120,61,188,239,15,111,123,96,228,55,217,12,221,83,255,216,41,93,16,91,141,122,
        32,211,49,19,101,164,204,251,202,183,147,50,232,218,51,142,157,206,143,22,139,215,198,218,108,70,
        167,184,118,126,232,54,250,234,217,40,223,102,116,46,83,42,150,130,0,182,221,1,191,148,176,130,5,
        133,155,176,173,64,34,225,20,118,176,128,22,4,10,92,160,146,32,97,236,168,72,184,199,57,157,50,61,
        174,108,139,230,252,216,107,87,144,250,111,132,91,158,217,227,97,230,63,123,73,162,226,115,123,108,
        206,99,145,156,220,177,20,40,220,2,163,144,6,136,79,192,100,64,249,131,65,230,252,59,27,90,94,32,
        140,143,240,233,163,240,1,23,95,27,190,113,181
    };

    const unsigned char sub_svg[258] {
        120,218,85,81,75,78,195,48,16,229,40,35,179,133,198,158,166,141,73,147,172,89,192,182,11,118,38,
        113,62,170,219,68,177,41,10,39,224,4,236,144,56,68,111,69,15,193,56,10,133,140,100,191,231,231,25,
        207,179,157,216,99,149,37,133,46,45,52,69,202,60,65,22,100,73,5,205,97,103,115,213,233,216,168,103,
        109,82,246,253,245,126,254,60,157,63,78,32,216,223,102,213,183,47,221,190,45,116,202,140,26,116,
        207,198,99,70,42,88,150,116,202,213,163,210,235,220,9,164,74,235,6,67,201,101,99,76,124,205,199,
        216,88,215,183,59,125,251,218,20,174,142,249,66,174,121,116,23,49,160,178,71,192,27,9,91,88,114,
        184,247,211,22,36,17,228,112,132,37,212,16,145,128,17,41,43,34,66,76,138,132,39,234,211,22,77,71,
        35,62,144,57,55,116,218,166,44,255,31,254,150,51,123,232,123,206,236,149,37,42,84,115,123,98,129,
        97,180,250,117,39,66,8,225,193,131,144,30,249,132,107,64,175,35,78,107,121,193,41,61,132,55,240,
        14,2,122,253,192,255,193,213,15,173,107,114,223
    };

}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************
